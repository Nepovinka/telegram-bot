import os
import io
import datetime
import re
from dotenv import load_dotenv
import telebot
from openai import OpenAI
from google.oauth2 import service_account
from googleapiclient.discovery import build
from PIL import Image

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise RuntimeError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å TELEGRAM_TOKEN –∏ OPENAI_API_KEY')

bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

SYSTEM_PROMPT = (
    "–ü—Ä–∏–≤–µ–¥–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: "
    "**–î–∞—Ç–∞ –∏ –í—Ä–µ–º—è:**, **–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞:**, **–û—Ç–∫—É–¥–∞:**, **–ö—É–¥–∞:**, "
    "**–ö–æ–ª-–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:**, **–¢–µ–ª–µ—Ñ–æ–Ω –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:**, **–ò–º—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:**, **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**. "
    "–ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–∞ - –ø–∏—à–∏ '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'. "
    "–î–ª—è –¥–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì, –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ß–ß:–ú–ú. "
    "–í –ø–æ–ª–µ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–π –¥–µ—Ç—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ, –±—É—Å—Ç–µ—Ä, –±–∞–≥–∞–∂ –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è."
)

def ask_openai(user_message: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ OpenAI"""
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_message}
            ],
            max_tokens=1000,
            temperature=0.1
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ OpenAI: {str(e)}"

def extract_text_from_image_railway(image_file):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI Vision"""
    try:
        image = Image.open(image_file)
        img_byte_arr = io.BytesIO()
        image.save(img_byte_arr, format='PNG')
        img_byte_arr = img_byte_arr.getvalue()
        
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "–ò–∑–≤–ª–µ–∫–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"},
                        {
                            "type": "image_url",
                            "image_url": {"url": f"data:image/png;base64,{img_byte_arr.hex()}"}
                        }
                    ]
                }
            ],
            max_tokens=1000
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ OCR: {e}"

def smart_date_parsing(reply_text, original_text):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞"""
    import datetime
    import re
    
    # –ò—â–µ–º –≤ –æ—Ç–≤–µ—Ç–µ –±–æ—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    search_texts = [
        ('bot_reply', reply_text.replace('**', '').replace('*', '')),
        ('original_text', original_text)
    ]
    
    date_pattern = r'(\d{1,2}\.\d{1,2}\.\d{2,4})'
    time_pattern = r'(\d{1,2}:\d{2})'
    
    for text_name, full_text in search_texts:
        date_match = re.search(date_pattern, full_text)
        time_match = re.search(time_pattern, full_text)
        
        if date_match and time_match:
            return {
                'date_str': date_match.group(1),
                'time_str': time_match.group(1),
                'found_in': text_name
            }
    
    return None

def add_event_to_calendar(event_data):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar"""
    try:
        SCOPES = ['https://www.googleapis.com/auth/calendar']
        SERVICE_ACCOUNT_FILE = 'lively-vim-467215-i4-cd77f5dc7f2f.json'
        calendar_id = 'slavka0990slavka@gmail.com'

        credentials = service_account.Credentials.from_service_account_file(
            SERVICE_ACCOUNT_FILE, scopes=SCOPES)
        service = build('calendar', 'v3', credentials=credentials)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        main_event = {
            'summary': event_data['summary'],
            'description': event_data['description'],
            'start': {'dateTime': event_data['start'], 'timeZone': 'Europe/Minsk'},
            'end': {'dateTime': event_data['end'], 'timeZone': 'Europe/Minsk'},
            'reminders': {'useDefault': False, 'overrides': []}
        }
        
        created_event = service.events().insert(calendarId=calendar_id, body=main_event).execute()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        start_dt = datetime.datetime.fromisoformat(event_data['start'])
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å
        reminder_1h_start = start_dt - datetime.timedelta(hours=1)
        reminder_1h_event = {
            'summary': f"‚è∞ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –∑–∞ 1 —á–∞—Å: {event_data['summary']}",
            'description': f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Å–æ–±—ã—Ç–∏–∏ —á–µ—Ä–µ–∑ 1 —á–∞—Å:\n\n{event_data['description']}",
            'start': {'dateTime': reminder_1h_start.strftime('%Y-%m-%dT%H:%M:%S'), 'timeZone': 'Europe/Minsk'},
            'end': {'dateTime': (reminder_1h_start + datetime.timedelta(minutes=15)).strftime('%Y-%m-%dT%H:%M:%S'), 'timeZone': 'Europe/Minsk'},
            'reminders': {'useDefault': True},
            'colorId': '11'
        }
        service.events().insert(calendarId=calendar_id, body=reminder_1h_event).execute()
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å
        reminder_1d_start = start_dt - datetime.timedelta(days=1)
        reminder_1d_event = {
            'summary': f"üìÖ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –∑–∞ 1 –¥–µ–Ω—å: {event_data['summary']}",
            'description': f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Å–æ–±—ã—Ç–∏–∏ –∑–∞–≤—Ç—Ä–∞:\n\n{event_data['description']}",
            'start': {'dateTime': reminder_1d_start.strftime('%Y-%m-%dT%H:%M:%S'), 'timeZone': 'Europe/Minsk'},
            'end': {'dateTime': (reminder_1d_start + datetime.timedelta(minutes=15)).strftime('%Y-%m-%dT%H:%M:%S'), 'timeZone': 'Europe/Minsk'},
            'reminders': {'useDefault': True},
            'colorId': '9'
        }
        service.events().insert(calendarId=calendar_id, body=reminder_1d_event).execute()
        
        return {'api_link': created_event.get('htmlLink'), 'ics_file': None}
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return {'api_link': None, 'ics_file': None}

@bot.message_handler(content_types=['document'])
def handle_document(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    bot.send_chat_action(message.chat.id, 'typing')
    
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    
    # –î–ª—è PDF –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥
    try:
        from PyPDF2 import PdfReader
        reader = PdfReader(io.BytesIO(downloaded_file))
        text_content = ""
        for page in reader.pages:
            text_content += page.extract_text() + "\n"
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        return
    
    if len(text_content.strip()) < 50:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        return
    
    bot.send_message(message.chat.id, "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å –ø–æ–º–æ—â—å—é –ò–ò...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI
    reply = ask_openai(text_content)
    
    if reply.startswith("–û—à–∏–±–∫–∞"):
        bot.send_message(message.chat.id, f"‚ùå {reply}")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    try:
        bot.send_message(message.chat.id, reply, parse_mode='Markdown')
    except:
        bot.send_message(message.chat.id, reply)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    try:
        date_result = smart_date_parsing(reply, text_content)
        
        if not date_result:
            raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞")
        
        date_str = date_result['date_str']
        time_str = date_result['time_str']
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        if len(date_str.split('.')[-1]) == 2:
            date_obj = datetime.datetime.strptime(date_str, "%d.%m.%y")
        else:
            date_obj = datetime.datetime.strptime(date_str, "%d.%m.%Y")
        
        time_obj = datetime.datetime.strptime(time_str, "%H:%M")
        start_dt = date_obj.replace(hour=time_obj.hour, minute=time_obj.minute)
        end_dt = start_dt + datetime.timedelta(hours=1)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º summary –∏–∑ –æ—Ç–≤–µ—Ç–∞
        lines = reply.split('\n')
        summary = "–ó–∞–∫–∞–∑"
        for line in lines:
            if "—Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞:" in line.lower():
                vehicle = line.split(':')[-1].strip().replace('**', '').replace('*', '')
                summary = f"{vehicle} - –ó–∞–∫–∞–∑"
                break
        
        event_data = {
            'summary': summary,
            'description': reply.replace('**', '').replace('*', '').strip(),
            'start': start_dt.strftime('%Y-%m-%dT%H:%M:%S'),
            'end': end_dt.strftime('%Y-%m-%dT%H:%M:%S')
        }
        
        result = add_event_to_calendar(event_data)
        
        if result['api_link']:
            bot.send_message(message.chat.id, f'‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å!\n{result["api_link"]}')
        else:
            bot.send_message(message.chat.id, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.')
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.")

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    bot.send_chat_action(message.chat.id, 'typing')
    
    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    
    bot.send_message(message.chat.id, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_text = extract_text_from_image_railway(io.BytesIO(downloaded_file))
    
    if len(image_text.strip()) < 20:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
        return
    
    bot.send_message(message.chat.id, "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å –ø–æ–º–æ—â—å—é –ò–ò...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI
    reply = ask_openai(image_text)
    
    if reply.startswith("–û—à–∏–±–∫–∞"):
        bot.send_message(message.chat.id, f"‚ùå {reply}")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    try:
        bot.send_message(message.chat.id, reply, parse_mode='Markdown')
    except:
        bot.send_message(message.chat.id, reply)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ handle_document)
    try:
        date_result = smart_date_parsing(reply, image_text)
        
        if not date_result:
            raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞")
        
        date_str = date_result['date_str']
        time_str = date_result['time_str']
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        if len(date_str.split('.')[-1]) == 2:
            date_obj = datetime.datetime.strptime(date_str, "%d.%m.%y")
        else:
            date_obj = datetime.datetime.strptime(date_str, "%d.%m.%Y")
        
        time_obj = datetime.datetime.strptime(time_str, "%H:%M")
        start_dt = date_obj.replace(hour=time_obj.hour, minute=time_obj.minute)
        end_dt = start_dt + datetime.timedelta(hours=1)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º summary –∏–∑ –æ—Ç–≤–µ—Ç–∞
        lines = reply.split('\n')
        summary = "–ó–∞–∫–∞–∑"
        for line in lines:
            if "—Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞:" in line.lower():
                vehicle = line.split(':')[-1].strip().replace('**', '').replace('*', '')
                summary = f"{vehicle} - –ó–∞–∫–∞–∑"
                break
        
        event_data = {
            'summary': summary,
            'description': reply.replace('**', '').replace('*', '').strip(),
            'start': start_dt.strftime('%Y-%m-%dT%H:%M:%S'),
            'end': end_dt.strftime('%Y-%m-%dT%H:%M:%S')
        }
        
        result = add_event_to_calendar(event_data)
        
        if result['api_link']:
            bot.send_message(message.chat.id, f'‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å!\n{result["api_link"]}')
        else:
            bot.send_message(message.chat.id, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.')
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    bot.send_chat_action(message.chat.id, 'typing')
    
    bot.send_message(message.chat.id, "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI
    reply = ask_openai(message.text)
    
    if reply.startswith("–û—à–∏–±–∫–∞"):
        bot.send_message(message.chat.id, f"‚ùå {reply}")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    try:
        bot.send_message(message.chat.id, reply, parse_mode='Markdown')
    except:
        bot.send_message(message.chat.id, reply)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ handle_document)
    try:
        date_result = smart_date_parsing(reply, message.text)
        
        if not date_result:
            raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞")
        
        date_str = date_result['date_str']
        time_str = date_result['time_str']
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        if len(date_str.split('.')[-1]) == 2:
            date_obj = datetime.datetime.strptime(date_str, "%d.%m.%y")
        else:
            date_obj = datetime.datetime.strptime(date_str, "%d.%m.%Y")
        
        time_obj = datetime.datetime.strptime(time_str, "%H:%M")
        start_dt = date_obj.replace(hour=time_obj.hour, minute=time_obj.minute)
        end_dt = start_dt + datetime.timedelta(hours=1)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º summary –∏–∑ –æ—Ç–≤–µ—Ç–∞
        lines = reply.split('\n')
        summary = "–ó–∞–∫–∞–∑"
        for line in lines:
            if "—Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞:" in line.lower():
                vehicle = line.split(':')[-1].strip().replace('**', '').replace('*', '')
                summary = f"{vehicle} - –ó–∞–∫–∞–∑"
                break
        
        event_data = {
            'summary': summary,
            'description': reply.replace('**', '').replace('*', '').strip(),
            'start': start_dt.strftime('%Y-%m-%dT%H:%M:%S'),
            'end': end_dt.strftime('%Y-%m-%dT%H:%M:%S')
        }
        
        result = add_event_to_calendar(event_data)
        
        if result['api_link']:
            bot.send_message(message.chat.id, f'‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å!\n{result["api_link"]}')
        else:
            bot.send_message(message.chat.id, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.')
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.")

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway...")
    bot.polling(none_stop=True) 